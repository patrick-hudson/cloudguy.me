<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  
  <channel>
    <title>I&#39;m in a Cloud!</title>
    <description>I am Patrick, I’m a guy who always manages to find himself neck deep in the Cloud, and someone who likes to break it.  I also tend to get drunk sometimes.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/rss.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 28 Jul 2016 07:19:10 -0500</pubDate>
    <lastBuildDate>Thu, 28 Jul 2016 07:19:10 -0500</lastBuildDate>
    
    <item>
      <title>Mail In a Box: Keeping the NSA out of your base since 2013</title>
      <description><![CDATA[ <p>Since before it was widely known that the internet wasn’t as secure as we hoped, I’ve been one to run applications in my own environment instead of taking advantage of the commercialized products easily available. Sometimes it’s simply for the sheer amount of control, and others it’s because I don’t want my Drunk Spending on Amazon to be tied to my email accounts. It’s not always the best thing that Google and Amazon can now predict the exact days and times I’ll be most inebriated and offer me “Great deals”</p>

<p>That’s where we’re gonna start today! Lets take back our privacy one service at a time, and today’s service is E-Mail. There are quite a few turn-key applications in a box that will create  fully functioning mail server that includes both sending and receiving connectors and a full fledged webmail client. The one I’ve come to know, and use is <a href="https://mailinabox.email/">Mail-in-a-Box</a>. That’s not the only option out there, another quite popular turn-key systems is <a href="http://www.iredmail.org/index.html">iRedMail</a>.</p>

<p>The cons of running your own mail server can be quite daunting especially if managing a machine that could be so vital to our personal and professional lives. Don’t take that as a reason not to do it, but things you’ll want to be aware of before undertaking something like this.</p>

<blockquote>
  <ul>
    <li>Having an email account get compromised is a real issue that I personally see daily in this industry. If that ends up happening to you, you’re IP address will be placed on a Spam Black list and you won’t be able to send out email until it’s cleaned up</li>
    <li>The nature of the server market today is full our Cloud Providers. These companies have built their entire business on a use and throw away method. The server you spun up today, may have been someones spam bed yesterday</li>
    <li>If your email goes down at 1am the morning before a project is due, are you willing to fix it?</li>
  </ul>
</blockquote>

<p>Those are the big points. MIAB has their own check list</p>

<h3 id="pre-flight-checklist">Pre-flight Checklist</h3>

<blockquote>
  <ul>
    <li>Can I run my Mail-in-a-Box at home?</li>
    <li>No. Computers on most residential networks are blocked from sending mail both on the sending end (e.g. your ISP blocking port 25) and on the receiving end (by blacklists) because residential computers are all too often hijacked to send spam. Your home IP address is also probably dynamic and lacks configurable “reverse DNS.” If any of these apply to you, you’ll need to use a virtual machine in the cloud.</li>
    <li>What will it cost?</li>
    <li>This is going to cost you about $16 per month. Most of the cost is in having a (virtual) machine connected to the Internet 24/7. You can divide this among friends and share your Mail-in-a-Box if you’d like to split it up.</li>
    <li>Do I have time?</li>
    <li>There’s also your time. Once a Mail-in-a-Box is set up, we hope it “just works” but when you are your own system administrator you must be prepared to resolve issues as they arise.</li>
    <li>How will this affect my website? (Advanced.)</li>
    <li>If your website is just HTML pages and static files, you can copy it onto your Mail-in-a-Box for a really simple hosting solution. If you have a website already, be aware that your Mail-in-a-Box wants to take over your DNS so that it can configure it correctly for email, and we recommend you let the box do that, but you can configure the DNS to keep your website on another machine. You may also need to configure relaying for outbound transactional email.</li>
    <li>Can I modify my box after / use my box for something else too? (Advanced.)</li>
    <li>No. Mail-in-a-Box must be installed on a fresh machine that will be dedicated to Mail-in-a-Box, and you cannot modify the box after installation (configuration changes will get overwritten by the box’s self-management). If you are looking for something more advanced, try iRedMail, Sovereign, or Modoboa.</li>
  </ul>
</blockquote>

<p>If you are still with me, and ready to do this then lets dig in!</p>

<p>First, we need to find a server. That in and of itself is a not something to take lightly when dealing with a mail server that needs to have a clean IP address range. No company is giving  me money to tell you that they are awesome. So, this part I’ll leave up to you. Start Googling “Quality providers for an email server”</p>

<p>An important thing to note, you need a <strong>fresh</strong> server. It needs to be 100% empty beyond the base Ubuntu 14.04 OS.</p>

<h2 id="installation">Installation</h2>

<p>I’m not even going to try and re-create the beautiful <a href="https://mailinabox.email/guide.html">documentation</a> they’ve created. So I’ll point you over there, and capture a few key points as the install goes.</p>

<p>Installation starts with 1 line</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">curl -s https://mailinabox.email/bootstrap.sh | sudo bash</code></pre></figure>

<p>That’s it, now we go through each prompt.</p>

<p>You’ll be asked a series of questions that are rather self explanitory. What would your like your new email to me? What would you like to call the server? What country should you use for the SSL Certificate?</p>

<p>It’ll spit out a few diagnostic information pieces</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Primary Hostname: box.drunksysadmin.com
Public IP Address: xx.xx.xx.xx
Private IP Address: 172.xx.xx.xx
Mail-in-a-Box Version:  v0.13a</code></pre></figure>

<p>Then it will do more installation steps (again, I highly recommend following Mail-in-a-box’s documentation for pictures!)</p>

<p>Once it’s all done, you’ll get something that looks like this</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Your Mail-in-a-Box is running.

Please log <span class="k">in </span>to the control panel <span class="k">for </span>further instructions at:

    https://xx.xx.xx.xx/admin

You will be alerted that the website has an invalid certificate. Check that
the certificate fingerprint matches:

C0:9B:FF:04:2B:2D:8F:47:5A:8B:D5:88:B7:05:D3:4B:6C:22:80:5F</code></pre></figure>

<p>Boom! Login and start configuring.</p>

<h3 id="final-words">Final Words</h3>

<p>Is this something I’d recommend doing for someone who has minimal Linux Experience? Yes and No. Setting Mail-in-a-box up is not for the faint of heart, but my recommendation would be to head over to <a href="http://www.namecheap.com">Namecheap</a> and setup a domain. Use that domain to install your mail server. Once you are comfortable enough with the setup, you can then move your primary domain over.</p>

<p>It’s a great learning experience for anyone who really wants to dive into Linux, or someone who just wants to keep the NSA’s hands out of your email!</p>
 
<br />
<hr />
<p>You’ve just read <strong>"<a href="http://localhost:4000/linux/email/mail-in-a-box-keeping-the-nsa-out-of-your-base-since-2013/">Mail In a Box: Keeping the NSA out of your base since 2013</a>"</strong> on <strong>"<a href="http://localhost:4000/">I'm in a Cloud!</a>"</strong>.</p>
 ]]></description>
      <pubDate>Mon, 24 Aug 2015 00:00:00 -0500</pubDate>
      <link>http://localhost:4000/linux/email/mail-in-a-box-keeping-the-nsa-out-of-your-base-since-2013/</link>
      <guid isPermaLink="true">http://localhost:4000/linux/email/mail-in-a-box-keeping-the-nsa-out-of-your-base-since-2013/</guid>
      
      <category>Linux</category>
      
      <category>EMail</category>
      
    </item>
    
    <item>
      <title>Gogs: A self hosted GitHub alternative on a diet</title>
      <description><![CDATA[ <p>In walks <a href="https://try.gogs.io/" target="_blank">Gogs</a>, a seriously streamlined platform for all of your revision control needs.</p>

<p><img src="https://puu.sh/jILoV/ea1ff9bb78.png" alt="" class="image fit" /></p>

<p>Now, don’t get me wrong, GitLab, GitHub Enterprise and the Monopoly know as Atlassian have there own each established market sectors. You are not going to get every single feature of a multi thousand dollar licensed product. There are a few, almost hilariously missing pieces that makes Gogs unusable by any of not all team based development operations. Those two things are Pull Requests and any type of Code Review. However, as a single developer wanting a place to store my code that I’d never, ever want to see the light of day on GitHub. It’s a seriously great middle ground between Enterprise and Hobby.
It also came to a surprise because for such an advanced looking product, they seem to have shown up over night. With just over <a href="https://github.com/gogits/gogs/commits/master?page=76">70 Pages</a> of commits on GitHub starting in March of 2014, they have managed to create an amazing product that runs rather well, and has the added benefit of being written in GO. There is good news regarding the two blatant issues that prevent Gogs from becoming anything usable in this market, and thats <a href="https://github.com/go-gitea/gitea">Gitea</a>. <em>Disclaimer I have not extensively tested Gitea but it is at its core a fork of Gogs</em></p>

<p>All your basic GitHub-esk functionality exists, you can create repos, both public and private, there’s an issue tracker for each repo and of course SSH based access for secure commits and pulls.</p>

<p><img src="https://puu.sh/jILnh/c9ea270be7.png" alt="" class="image fit" /></p>

<p>Keep your eyes pealed for my post about getting it installed, but in all honesty it’s so simple to install that a dedicated post is over kill! Not to mention, if you use one of their <a href="https://github.com/gogits/gogs/tree/master/docker">Docker</a> configs or <a href="https://github.com/geerlingguy/ansible-vagrant-examples/tree/master/gogs">VagrantFiles</a> you’ll be up and running in a matter of seconds.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># Pull image from Docker Hub.</span>
<span class="gp">$ </span>docker pull gogs/gogs

<span class="c"># Create local directory for volume.</span>
<span class="gp">$ </span>mkdir -p /var/gogs

<span class="c"># Use `docker run` for the first time.</span>
<span class="gp">$ </span>docker run --name<span class="o">=</span>gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs

<span class="c"># Use `docker start` if you have stopped it.</span>
<span class="gp">$ </span>docker start gogs </code></pre></figure>

<p>That’s it, 4 lines and you have your own GitHub. A more in-depth installation guide will be showing up soon, but for now you can head over to Gogs themselves and go thought their <a href="http://gogs.io/docs/installation/install_from_binary.html">documentation</a></p>
 
<br />
<hr />
<p>You’ve just read <strong>"<a href="http://localhost:4000/linux/git/gogs-a-self-hosted-github-alternative-on-a-diet/">Gogs: A self hosted GitHub alternative on a diet</a>"</strong> on <strong>"<a href="http://localhost:4000/">I'm in a Cloud!</a>"</strong>.</p>
 ]]></description>
      <pubDate>Fri, 21 Aug 2015 00:00:00 -0500</pubDate>
      <link>http://localhost:4000/linux/git/gogs-a-self-hosted-github-alternative-on-a-diet/</link>
      <guid isPermaLink="true">http://localhost:4000/linux/git/gogs-a-self-hosted-github-alternative-on-a-diet/</guid>
      
      <category>Linux</category>
      
      <category>Git</category>
      
    </item>
    
    <item>
      <title>Automated Amazon EBS Snapshots - Ubuntu 14.04 LTS</title>
      <description><![CDATA[ <p>Wouldn’t it be cool if we could schedule EBS Snapshots with features like backup purging based on how old they are, or possibly target specific instances that are tagged?</p>

<p>I ran across a great repository that’s aptly named “<a href="https://github.com/colinbjohnson/aws-missing-tools">aws-missing-tools</a>” that’s been created by <a href="https://github.com/colinbjohnson">Colin Johnson</a>.</p>

<p>It contains an insane amount of awesome stuff, but this post will detail one specific tool named <a href="https://github.com/colinbjohnson/aws-missing-tools/tree/master/ec2-automate-backup">ec2-automate-backup</a>. We’re specifically going to use the the ec2-automate-backup-awscli.sh script and not the ec2-automate-backup.sh. The script we’re using utilizes the awscli python package where as the other script utilizes EC2 API Tools. ec2-automate-backup was created to provide easy backup/snapshot functionality for multiple EC2 EBS volumes</p>

<p><em>One thing to note, the server you run that script from does not have to be within the Amazon umbrella. It’ll work anywhere.</em></p>

<div align="center">
  <h1 id="installation">Installation</h1>
</div>

<h4 id="we-need-two-packages-before-getting-started-python-2x-or-3x-and-setup-tools">We need two packages before getting started, Python 2.x or 3.x and Setup Tools</h4>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">sudo apt-get update
apt-get install python python-setuptools</code></pre></figure>

<h4 id="use-easyinstall-to-install-pip">Use easy_install to install pip</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">easy_install pip</code></pre></figure>

<h3 id="finally-use-pip-to-install-awscli">Finally use pip to install awscli</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">pip install awscli</code></pre></figure>

<div align="center">
  <h1 id="configuration">Configuration</h1>
</div>

<h3 id="run-the-awscli-configuration-tool-and-fill-in-your-access-key-id-your-secret-access-key-default-region-us-east-1-us-west-1-us-west-2-etc-and-finally-output-format">Run the awscli configuration tool and fill in, your Access Key ID, your Secret Access Key, Default Region (us-east-1, us-west-1, us-west-2, etc) and finally output format</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">aws configure
  AWS Access Key ID <span class="o">[</span>None]: 1234564789987654321
  AWS Secret Access Key <span class="o">[</span>None]: abcdefghijklmnop
  Default region name <span class="o">[</span>None]: us-west-2
  Default output format <span class="o">[</span>None]: json</code></pre></figure>

<h3 id="create-a-new-user-named-backup-agent-and-create-the-home-directory">Create a new user named backup-agent, and create the home directory</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">useradd -m -d /home/backup-agent -s /bin/bash backup-agent</code></pre></figure>

<h3 id="download-the-ec2-automate-backup-awsclishhttpsgithubcomcolinbjohnsonaws-missing-toolsblobmasterec2-automate-backupec2-automate-backup-awsclish-script">Download the <a href="https://github.com/colinbjohnson/aws-missing-tools/blob/master/ec2-automate-backup/ec2-automate-backup-awscli.sh">ec2-automate-backup-awscli.sh</a> script</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">curl -O https://raw.githubusercontent.com/colinbjohnson/aws-missing-tools/master/ec2-automate-backup/ec2-automate-backup-awscli.sh</code></pre></figure>

<div align="center">
  <h1 id="directions-for-use">Directions For Use</h1>
</div>

<h3 id="example-of-use">Example of Use</h3>

<p><code class="highlighter-rouge">ec2-automate-backup-awscli.sh -v vol-6d6a0527</code></p>

<p>the above example would provide a single backup of the EBS volumeid vol-6d6a0527. The snapshot would be created with the description “vol-6d6a0527_2012-09-07”.</p>

<h4 id="required-parameters">Required Parameters</h4>

<p>ec2-automate-backup-awscli.sh requires one of the following two parameters be provided:</p>

<p><code class="highlighter-rouge">-v &lt;volumeid&gt;</code> - the “volumeid” parameter is required to select EBS volumes for snapshot if ec2-automate-backup-awscli.sh is run using the “volumeid” selection method - the “volumeid” selection method is the default selection method.</p>

<p><code class="highlighter-rouge">-t &lt;tag&gt;</code> - the “tag” parameter is required if the “method” of selecting EBS volumes for snapshot is by tag (-s tag). The format for tag is key=value (example: Backup=true) and the correct method for running ec2-automate-backup-awscli.sh in this manner is ec2-automate-backup-awscli.sh -s tag -t Backup=true.
#### Optional Parameters
<code class="highlighter-rouge">-r &lt;region&gt;</code> - the region that contains the EBS volumes for which you wish to have a snapshot created.</p>

<p><code class="highlighter-rouge">-s &lt;selection_method&gt;</code> - the selection method by which EBS volumes will be selected. Currently supported selection methods are “volumeid” and “tag.” The selection method “volumeid” identifies EBS volumes for which a snapshot should be taken by volume id whereas the selection method “tag” identifies EBS volumes for which a snapshot should be taken by a key=value format tag.</p>

<p><code class="highlighter-rouge">-c &lt;cron_primer_file&gt;</code> - running with the -c option and a providing a file will cause ec2-automate-backup-awscli.sh-awscli.sh to source a file for environmental configuration - ideal for running ec2-automate-backup-awscli.sh-awscli.sh under cron. An example cron primer file is located in the “Resources” directory and is called cron-primer.sh.</p>

<p><code class="highlighter-rouge">-n</code> - tag snapshots “Name” tag as well as description</p>

<p><code class="highlighter-rouge">-h</code> - tag snapshots “InitiatingHost” tag to specify which host ran the script</p>

<p><code class="highlighter-rouge">-k &lt;purge_after_days&gt;</code> - the period after which a snapshot can be purged. For example, running “ec2-automate-backup-awscli.sh-awscli.sh -v “vol-6d6a0527 vol-636a0112” -k 31” would allow snapshots to be removed after 31 days. purge_after_days creates two tags for each volume that was backed up - a PurgeAllow tag which is set to PurgeAllow=true and a PurgeAfter tag which is set to the present day (in UTC) + the value provided by -k.</p>

<p><code class="highlighter-rouge">-p</code> - the -p flag will purge (meaning delete) all snapshots that were created more than “purge after days” ago. ec2-automate-backup-awscli.sh looks at two tags to determine which snapshots should be deleted - the PurgeAllow and PurgeAfter tags. The tags must be set as follows: PurgeAllow=true and PurgeAfter=YYYY-MM-DD where YYYY-MM-DD must be before the present date.</p>
<div align="center">
  <h1 id="potential-uses-and-methods-of-use">Potential Uses and Methods of Use</h1>
</div>

<p>To backup multiple EBS volumes use ec2-automate-backup-awscli.sh as follows:</p>

<p><code class="highlighter-rouge">ec2-automate-backup-awscli.sh -v "vol-6d6a0527 vol-636a0112"</code></p>

<p>To backup a selected group of EBS volumes on a daily schedule tag each volume you wish to backup with the tag “Backup=true” and run ec2-automate-backup-awscli.sh using cron as follows:</p>

<p><code class="highlighter-rouge">0 0 * * * ec2-automate-backup-awscli.sh -s tag -t "Backup=true"</code></p>

<p>To backup a selected group of EBS volumes on a daily and/or monthly schedule tag each volume you wish to backup with the tag “Backup-Daily=true” and/or “Backup-Monthly=true” and run ec2-automate-backup-awscli.sh using cron as follows:</p>

<p><code class="highlighter-rouge">0 0 * * * backup-agent /home/backup-agent/ec2-automate-backup-awscli.sh -s tag -t "Backup-Daily=true"</code></p>

<p><code class="highlighter-rouge">0 0 1 * * backup-agent /home/backup-agent/ec2-automate-backup-awscli.sh -s tag -t "Backup-Monthly=true"</code></p>

<p>To perform daily backup using cron and to load environment configuration with a “cron-primer” file:</p>

<p><code class="highlighter-rouge">0 0 * * * backup-agent /home/backup-agent/ec2-automate-backup-awscli.sh -c /home/backup-agent/cron-primer.sh -s tag -t "Backup=True"</code></p>

<p><code class="highlighter-rouge">-u</code> - the -u flag will tag snapshots with additional data so that snapshots can be more easily located. Currently the two user tags created are Volume=”ebs_volume” and Created=”date.” These can be easily modified in code.</p>
 
<br />
<hr />
<p>You’ve just read <strong>"<a href="http://localhost:4000/linux/python/automated-amazon-ebs-snapshots/">Automated Amazon EBS Snapshots - Ubuntu 14.04 LTS</a>"</strong> on <strong>"<a href="http://localhost:4000/">I'm in a Cloud!</a>"</strong>.</p>
 ]]></description>
      <pubDate>Thu, 20 Aug 2015 00:00:00 -0500</pubDate>
      <link>http://localhost:4000/linux/python/automated-amazon-ebs-snapshots/</link>
      <guid isPermaLink="true">http://localhost:4000/linux/python/automated-amazon-ebs-snapshots/</guid>
      
      <category>Linux</category>
      
      <category>Python</category>
      
    </item>
    
  </channel>
</rss>
